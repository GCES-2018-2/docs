{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Contribuindo For full documentation visit mkdocs.org . Instala\u00e7\u00e3o Instalar com um gerenciador de pacotes Se voc\u00ea tem e usa um gerenciador de pacotes (como apt-get , dnf , homebrew , yum , chocolatey , etc.) para instalar pacotes em seu sistema, ent\u00e3o voc\u00ea pode querer procurar por um pacote \"MkDocs\" e, se um recente vers\u00e3o est\u00e1 dispon\u00edvel, instale-a com o seu gerenciador de pacotes (verifique a documenta\u00e7\u00e3o do seu sistema para obter detalhes). \u00c9 isso a\u00ed, est\u00e1 feito! Pule para Introdu\u00e7\u00e3o . Se o seu gerenciador de pacotes n\u00e3o tiver um pacote \"MkDocs\" recente, voc\u00ea ainda poder\u00e1 usar o gerenciador de pacotes para instalar o \"Python\" e o \"pip\". Ent\u00e3o voc\u00ea pode usar o pip para instalar o MkDocs . Instala\u00e7\u00e3o manual Para instalar manualmente o MkDocs voc\u00ea precisar\u00e1 do Python instalado em seu sistema, assim como o gerenciador de pacotes Python, pip . Voc\u00ea pode verificar se voc\u00ea j\u00e1 instalou esses itens a partir da linha de comando: $ python --version Python 2 .7.2 $ pip --version pip 1 .5.2 O MkDocs suporta as vers\u00f5es 2.7, 3.4, 3.5, 3.6, 3.7 e pypy do Python. Instalando o MkDocs Instale o mkdocspacote usando pip: pip install mkdocs Agora voc\u00ea deve ter o mkdocscomando instalado em seu sistema. Corra mkdocs --versionpara verificar se tudo funcionou bem. $ mkdocs --version mkdocs, version 0 .15.3 Ambiente de Teste H\u00e1 um \u00fanico arquivo de configura\u00e7\u00e3o nomeado mkdocs.ymle uma pasta chamada docsque conter\u00e1 seus arquivos de origem da documenta\u00e7\u00e3o. No momento, a docs pasta cont\u00e9m apenas uma \u00fanica p\u00e1gina de documenta\u00e7\u00e3o, chamada index.md. O MkDocs vem com um servidor de desenvolvimento integrado que permite visualizar sua documenta\u00e7\u00e3o enquanto voc\u00ea trabalha nela. Verifique se voc\u00ea est\u00e1 no mesmo diret\u00f3rio que o mkdocs.yml arquivo de configura\u00e7\u00e3o e inicie o servidor executando o mkdocs serve comando: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [ I 160402 15 :50:43 server:271 ] Serving on http://127.0.0.1:8000 [ I 160402 15 :50:43 handlers:58 ] Start watching changes [ I 160402 15 :50:43 handlers:60 ] Start detecting changes Abra http://127.0.0.1:8000/no seu navegador e voc\u00ea ver\u00e1 a p\u00e1gina inicial padr\u00e3o sendo exibida: Deploy Para publicar as modifica\u00e7\u00f5es realizadas no Github Pages, ap\u00f3s adicion\u00e1-las ao controle de vers\u00e3o, utilizar o comando mkdocs gh-deploy . Ele realizar\u00e1 automaticamente o push das modifica\u00e7\u00f5es para a branch gh-pages, e em alguns segundos as mudan\u00e7as estar\u00e3o dispon\u00edveis no site. $ mkdocs gh-deploy","title":"Home"},{"location":"#contribuindo","text":"For full documentation visit mkdocs.org .","title":"Contribuindo"},{"location":"#instalacao","text":"Instalar com um gerenciador de pacotes Se voc\u00ea tem e usa um gerenciador de pacotes (como apt-get , dnf , homebrew , yum , chocolatey , etc.) para instalar pacotes em seu sistema, ent\u00e3o voc\u00ea pode querer procurar por um pacote \"MkDocs\" e, se um recente vers\u00e3o est\u00e1 dispon\u00edvel, instale-a com o seu gerenciador de pacotes (verifique a documenta\u00e7\u00e3o do seu sistema para obter detalhes). \u00c9 isso a\u00ed, est\u00e1 feito! Pule para Introdu\u00e7\u00e3o . Se o seu gerenciador de pacotes n\u00e3o tiver um pacote \"MkDocs\" recente, voc\u00ea ainda poder\u00e1 usar o gerenciador de pacotes para instalar o \"Python\" e o \"pip\". Ent\u00e3o voc\u00ea pode usar o pip para instalar o MkDocs . Instala\u00e7\u00e3o manual Para instalar manualmente o MkDocs voc\u00ea precisar\u00e1 do Python instalado em seu sistema, assim como o gerenciador de pacotes Python, pip . Voc\u00ea pode verificar se voc\u00ea j\u00e1 instalou esses itens a partir da linha de comando: $ python --version Python 2 .7.2 $ pip --version pip 1 .5.2 O MkDocs suporta as vers\u00f5es 2.7, 3.4, 3.5, 3.6, 3.7 e pypy do Python.","title":"Instala\u00e7\u00e3o"},{"location":"#instalando-o-mkdocs","text":"Instale o mkdocspacote usando pip: pip install mkdocs Agora voc\u00ea deve ter o mkdocscomando instalado em seu sistema. Corra mkdocs --versionpara verificar se tudo funcionou bem. $ mkdocs --version mkdocs, version 0 .15.3","title":"Instalando o MkDocs"},{"location":"#ambiente-de-teste","text":"H\u00e1 um \u00fanico arquivo de configura\u00e7\u00e3o nomeado mkdocs.ymle uma pasta chamada docsque conter\u00e1 seus arquivos de origem da documenta\u00e7\u00e3o. No momento, a docs pasta cont\u00e9m apenas uma \u00fanica p\u00e1gina de documenta\u00e7\u00e3o, chamada index.md. O MkDocs vem com um servidor de desenvolvimento integrado que permite visualizar sua documenta\u00e7\u00e3o enquanto voc\u00ea trabalha nela. Verifique se voc\u00ea est\u00e1 no mesmo diret\u00f3rio que o mkdocs.yml arquivo de configura\u00e7\u00e3o e inicie o servidor executando o mkdocs serve comando: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [ I 160402 15 :50:43 server:271 ] Serving on http://127.0.0.1:8000 [ I 160402 15 :50:43 handlers:58 ] Start watching changes [ I 160402 15 :50:43 handlers:60 ] Start detecting changes Abra http://127.0.0.1:8000/no seu navegador e voc\u00ea ver\u00e1 a p\u00e1gina inicial padr\u00e3o sendo exibida:","title":"Ambiente de Teste"},{"location":"#deploy","text":"Para publicar as modifica\u00e7\u00f5es realizadas no Github Pages, ap\u00f3s adicion\u00e1-las ao controle de vers\u00e3o, utilizar o comando mkdocs gh-deploy . Ele realizar\u00e1 automaticamente o push das modifica\u00e7\u00f5es para a branch gh-pages, e em alguns segundos as mudan\u00e7as estar\u00e3o dispon\u00edveis no site. $ mkdocs gh-deploy","title":"Deploy"},{"location":"stylesheet/css/","text":"How to name css classes 0. Before to think about class name, choose a good name for HTML elements If it\u2019s an input, use the input element. It will be far easier for the reader to scan the HTML document. Example : div class = submit / !-- Wooot ? -- input class = submit / !-- Ah, ok -- 1. Put the class name at the lowest possible level It impacts how classes will be named. Always use the class name directly on the HTML element you want to style, even if seems to cost an extra effort. Check the article of Chris Coyer below if it is not clear why. Example : main class = mainly p Lorem ipsum / p !-- I d like to style this paragraph-- / main main . mainly p { /* DON T DO THIS */ } /* Instead, assign a class name to p : p class= paragraphly / */ . paragraphly { } 2. Use content to find a name Example : . c-header-logo { /* Just by reading the name, I guess this selector targets the logo of the header. */ } 3. Don\u2019t use content, if the picture speaks louder Let\u2019s say the header logo actually looks like this : Guillotine Then don\u2019t call it header-logo. . guillotine { /* Oh, I see what we are trying to style */ } 4. Try -like suffix for better reuse. Example : h3 , . h3-like { /* some styling */ } p class = h3-title !--I am NOT an h3 title, but since designer asked me to look the same, I can t complain about my classname-- / p 5. Don\u2019t use camelCase It makes things harder to read. Example : . navToOneModuleICreated { font-size : 2 em ; } /* versus */ . nav-to-one-module-i-created { font-size : 2 em ; } 6. Try BEM It\u2019s one of the most commonly used convention by now. It looks really weird as first glance, don\u2019t be afraid The entry cost is extremely low You can try it now on any part of existing project Long term benefits are huge (double dash) means variation of the element. (double underscore) means children of the element. Example button class = btn btn--warning !-- .btn--warning one of the variation of .btn-- div class = btn__text / div !-- .btn__text one of the child of .btn-- / button . btn--warning { /* Yay ! By convention, I know that code here relate to the variation warning of a button, without event looking at the HMTL code. What a relief !*/ } . btn__text { /* For same reason, I know that this style will target text in a button */ } 7. Try more uglier BEM opens new possibilities, even if their conventions looks icky at first glance. But very unusual also means that the eye can quickly grab what is actually happening and where, and for BEM, believe me, it works. Now you can try more icky convention, as long as you stick to it the whole project. Example . DIMENSIONS_OF_mycomponent { /* Ickier is almost impossible. But now it is more clear what it is about.*/ /* I used it for SASS placeholder.*/ /* Don t abuse of this rule, though.*/ } 8. Use fully descriptive words Apart from big classics like nav, txt, url\u2026 you should avoid any abbreviation. 9. Try to use only one letter as a meaningful prefix If it\u2019s a visual component, start with c- If it\u2019s an object (like layout), start with o- I just love this trick from Harry Roberts. Example button class = o-layout div class = o-layout-item o-grid c-button / div !-- When scanning HTML, the eye can quickly differentiate who does what-- / button 10. Try [] when too many classes of a kind This little trick allows you to scan HTML quicker. Notice the classes .[ and .] do not exists in your CSS files, it is only here to help others to read your HTML. Example button class = [ o-layout ] div class = [ o-layout-item o-layout-item--first ] c-button / div !-- When scanning HTML, the eye can quickly differentiate who does what-- / button Source : Source code of Inuit Kitchen Sink 11. Use a js- prefix if it is only used by JavaScript If Javascript needs to target an element, don\u2019t make it rely on CSS style. Give a dedicated prefix, like js-. Example button class = js-click-me !-- When scanning HTML, I understand that this button has no CSS selector to design it. But, JavaScript will use it, probably to catch some event.-- / button 12. Try to separate parent from children If a class has to many responsibilities, split it into 2 separated properties. Example (bad) button class = a !-- This class below will contain a mix of properties some concerned by a-b relationship some concerned by b-c relationship CSS file is going to be hard to read-- div class = child-of-a-and-parent-of-c div class = c / div / div / button (good) button class = a !-- Split into 2 classes-- div class = child-of-a parent-of-c div class = c / div / div / button 13. Unsemantic classes should explicitly describe their properties Most of them contain only one property, there are no value in hiding what that is. . horizontal-alignment { /* Don t do this. Horizontal alignment can be achieved in many ways, when scanning this selector in HTML file, we have no clue about HOW it is achieved. */ text-align : center ; } /* Prefer this one. Using BEM, and a one-character prefix, see above */ . u-text-align--center { text-align : center ; } 14. Explicit hacks (I) If you\u2019re not happy with your CSS selector, say it to everybody. It will happen anyway, even to the best CSSuper(wo)men, so don\u2019t be ashamed of it. In your team, find a word that will be used for such cases, document it, and stick to it all along the lifetime of your project. For us, Atom IDE automatically highlight the word \u201cHACK\u201d so I used it. Example . my-component { margin-left : -7 px ; /* HACK here : magic number, here to compensate gutter */ } 15. Explicit hacks (II) Another valuable option is to put every weird code into a dedicated file, named shame.css Again, Harry Roberts come to the rescue. 16. Try to avoid more than two words for a given name The name must be self-descriptive in one or two words, or code will be hard to maintain. Example . button { /* OK */ } . dropdown-button { /* still OK */ } . dropdown-button-part-one { /* Hmm, still ok, but will be unredable when adding children, for ex : */ } . dropdown-button-part-one__button-admin { /* Yikes !!! */ } 17. Use data-state attribute to specify state of your component State manipulation happens very often. It happens so frequently that give the state a dedicated attribute saves times and effort over the long term. Example button class = c-button c-button--warning is-active !-- Don t do this-- / button button class = c-button c-button--warning data-state = is-active !-- That s better. I removed a class declaration, it enforces the one-state-rule, and for those who use Sass, it makes code cleaner.-- / button 18. Use has- or is- prefix for the state State manipulation happens very often. (bis) So adhere to a strict naming convention for the state will be very helpful Example . activated { /* Don t do this. I m not quite sure what you are talking about ?*/ } . is-activated { /* Yes, you re styling a state. */ } 19. Use a dash as a prefix when combining multiple state You should do everything you can to avoid state combination. But, when it is not possible, you can use this very helpful trick from Ben Smithett. Example button class = btn -color-red -size-large -shape-round / button 20. Try single quote instead of double quote when declaring selector in HTML It reduces noise a lot when reading the document. Example button class = c-button !-- BAD EXAMPLE : it uses instead of . Not a big deal on this tiny example, but when you deal with hundreds of selector in a HTML file, single quote is a better idea.-- / button button class = c-button !-- Good !-- / button","title":"Css"},{"location":"stylesheet/css/#how-to-name-css-classes","text":"","title":"How to name css classes"},{"location":"stylesheet/css/#0-before-to-think-about-class-name-choose-a-good-name-for-html-elements","text":"If it\u2019s an input, use the input element. It will be far easier for the reader to scan the HTML document. Example : div class = submit / !-- Wooot ? -- input class = submit / !-- Ah, ok --","title":"0. Before to think about class name, choose a good name for HTML elements"},{"location":"stylesheet/css/#1-put-the-class-name-at-the-lowest-possible-level","text":"It impacts how classes will be named. Always use the class name directly on the HTML element you want to style, even if seems to cost an extra effort. Check the article of Chris Coyer below if it is not clear why. Example : main class = mainly p Lorem ipsum / p !-- I d like to style this paragraph-- / main main . mainly p { /* DON T DO THIS */ } /* Instead, assign a class name to p : p class= paragraphly / */ . paragraphly { }","title":"1. Put the class name at the lowest possible level"},{"location":"stylesheet/css/#2-use-content-to-find-a-name","text":"Example : . c-header-logo { /* Just by reading the name, I guess this selector targets the logo of the header. */ }","title":"2. Use content to find a name"},{"location":"stylesheet/css/#3-dont-use-content-if-the-picture-speaks-louder","text":"Let\u2019s say the header logo actually looks like this : Guillotine Then don\u2019t call it header-logo. . guillotine { /* Oh, I see what we are trying to style */ }","title":"3. Don\u2019t use content, if the picture speaks louder"},{"location":"stylesheet/css/#4-try-like-suffix-for-better-reuse","text":"Example : h3 , . h3-like { /* some styling */ } p class = h3-title !--I am NOT an h3 title, but since designer asked me to look the same, I can t complain about my classname-- / p","title":"4. Try -like suffix for better reuse."},{"location":"stylesheet/css/#5-dont-use-camelcase","text":"It makes things harder to read. Example : . navToOneModuleICreated { font-size : 2 em ; } /* versus */ . nav-to-one-module-i-created { font-size : 2 em ; }","title":"5. Don\u2019t use camelCase"},{"location":"stylesheet/css/#6-try-bem","text":"It\u2019s one of the most commonly used convention by now. It looks really weird as first glance, don\u2019t be afraid The entry cost is extremely low You can try it now on any part of existing project Long term benefits are huge (double dash) means variation of the element. (double underscore) means children of the element. Example button class = btn btn--warning !-- .btn--warning one of the variation of .btn-- div class = btn__text / div !-- .btn__text one of the child of .btn-- / button . btn--warning { /* Yay ! By convention, I know that code here relate to the variation warning of a button, without event looking at the HMTL code. What a relief !*/ } . btn__text { /* For same reason, I know that this style will target text in a button */ }","title":"6. Try BEM"},{"location":"stylesheet/css/#7-try-more-uglier","text":"BEM opens new possibilities, even if their conventions looks icky at first glance. But very unusual also means that the eye can quickly grab what is actually happening and where, and for BEM, believe me, it works. Now you can try more icky convention, as long as you stick to it the whole project. Example . DIMENSIONS_OF_mycomponent { /* Ickier is almost impossible. But now it is more clear what it is about.*/ /* I used it for SASS placeholder.*/ /* Don t abuse of this rule, though.*/ }","title":"7. Try more uglier"},{"location":"stylesheet/css/#8-use-fully-descriptive-words","text":"Apart from big classics like nav, txt, url\u2026 you should avoid any abbreviation.","title":"8. Use fully descriptive words"},{"location":"stylesheet/css/#9-try-to-use-only-one-letter-as-a-meaningful-prefix","text":"If it\u2019s a visual component, start with c- If it\u2019s an object (like layout), start with o- I just love this trick from Harry Roberts. Example button class = o-layout div class = o-layout-item o-grid c-button / div !-- When scanning HTML, the eye can quickly differentiate who does what-- / button","title":"9. Try to use only one letter as a meaningful prefix"},{"location":"stylesheet/css/#10-try-when-too-many-classes-of-a-kind","text":"This little trick allows you to scan HTML quicker. Notice the classes .[ and .] do not exists in your CSS files, it is only here to help others to read your HTML. Example button class = [ o-layout ] div class = [ o-layout-item o-layout-item--first ] c-button / div !-- When scanning HTML, the eye can quickly differentiate who does what-- / button Source : Source code of Inuit Kitchen Sink","title":"10. Try [] when too many classes of a kind"},{"location":"stylesheet/css/#11-use-a-js-prefix-if-it-is-only-used-by-javascript","text":"If Javascript needs to target an element, don\u2019t make it rely on CSS style. Give a dedicated prefix, like js-. Example button class = js-click-me !-- When scanning HTML, I understand that this button has no CSS selector to design it. But, JavaScript will use it, probably to catch some event.-- / button","title":"11. Use a js- prefix if it is only used by JavaScript"},{"location":"stylesheet/css/#12-try-to-separate-parent-from-children","text":"If a class has to many responsibilities, split it into 2 separated properties. Example (bad) button class = a !-- This class below will contain a mix of properties some concerned by a-b relationship some concerned by b-c relationship CSS file is going to be hard to read-- div class = child-of-a-and-parent-of-c div class = c / div / div / button (good) button class = a !-- Split into 2 classes-- div class = child-of-a parent-of-c div class = c / div / div / button","title":"12. Try to separate parent from children"},{"location":"stylesheet/css/#13-unsemantic-classes-should-explicitly-describe-their-properties","text":"Most of them contain only one property, there are no value in hiding what that is. . horizontal-alignment { /* Don t do this. Horizontal alignment can be achieved in many ways, when scanning this selector in HTML file, we have no clue about HOW it is achieved. */ text-align : center ; } /* Prefer this one. Using BEM, and a one-character prefix, see above */ . u-text-align--center { text-align : center ; }","title":"13. Unsemantic classes should explicitly describe their properties"},{"location":"stylesheet/css/#14-explicit-hacks-i","text":"If you\u2019re not happy with your CSS selector, say it to everybody. It will happen anyway, even to the best CSSuper(wo)men, so don\u2019t be ashamed of it. In your team, find a word that will be used for such cases, document it, and stick to it all along the lifetime of your project. For us, Atom IDE automatically highlight the word \u201cHACK\u201d so I used it. Example . my-component { margin-left : -7 px ; /* HACK here : magic number, here to compensate gutter */ }","title":"14. Explicit hacks (I)"},{"location":"stylesheet/css/#15-explicit-hacks-ii","text":"Another valuable option is to put every weird code into a dedicated file, named shame.css Again, Harry Roberts come to the rescue.","title":"15. Explicit hacks (II)"},{"location":"stylesheet/css/#16-try-to-avoid-more-than-two-words-for-a-given-name","text":"The name must be self-descriptive in one or two words, or code will be hard to maintain. Example . button { /* OK */ } . dropdown-button { /* still OK */ } . dropdown-button-part-one { /* Hmm, still ok, but will be unredable when adding children, for ex : */ } . dropdown-button-part-one__button-admin { /* Yikes !!! */ }","title":"16. Try to avoid more than two words for a given name"},{"location":"stylesheet/css/#17-use-data-state-attribute-to-specify-state-of-your-component","text":"State manipulation happens very often. It happens so frequently that give the state a dedicated attribute saves times and effort over the long term. Example button class = c-button c-button--warning is-active !-- Don t do this-- / button button class = c-button c-button--warning data-state = is-active !-- That s better. I removed a class declaration, it enforces the one-state-rule, and for those who use Sass, it makes code cleaner.-- / button","title":"17. Use data-state attribute to specify state of your component"},{"location":"stylesheet/css/#18-use-has-or-is-prefix-for-the-state","text":"State manipulation happens very often. (bis) So adhere to a strict naming convention for the state will be very helpful Example . activated { /* Don t do this. I m not quite sure what you are talking about ?*/ } . is-activated { /* Yes, you re styling a state. */ }","title":"18. Use has- or is- prefix for the state"},{"location":"stylesheet/css/#19-use-a-dash-as-a-prefix-when-combining-multiple-state","text":"You should do everything you can to avoid state combination. But, when it is not possible, you can use this very helpful trick from Ben Smithett. Example button class = btn -color-red -size-large -shape-round / button","title":"19. Use a dash as a prefix when combining multiple state"},{"location":"stylesheet/css/#20-try-single-quote-instead-of-double-quote-when-declaring-selector-in-html","text":"It reduces noise a lot when reading the document. Example button class = c-button !-- BAD EXAMPLE : it uses instead of . Not a big deal on this tiny example, but when you deal with hundreds of selector in a HTML file, single quote is a better idea.-- / button button class = c-button !-- Good !-- / button","title":"20. Try single quote instead of double quote when declaring selector in HTML"}]}